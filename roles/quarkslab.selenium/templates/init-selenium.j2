#!/bin/sh
#
# {{ ansible_managed }}
#
### BEGIN INIT INFO
# Provides:          selenium daemon
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $network
# Should-Stop:       $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the selenium RC/Webdriver server
# Description:       Start the selenium RC/Webdriver server user specific in
#                    /etc/default/selenium
### END INIT INFO

if [ -z "${JAVA_BIN}" ]; then
    JAVA_BIN=`which java`
    if [ "$?" != "0" ]; then
        echo "Java binary not found" >&2
        exit 2
    fi
fi

NAME=selenium
DESC="Selenium Server"
DAEMON="${JAVA_BIN}"
PIDFILE="/var/run/selenium.pid"
SCRIPTNAME=/etc/init.d/${NAME}

# Include the default user configuration if exists
[ -r /etc/default/${NAME} ] && . /etc/default/${NAME}

DAEMON_ARGS="-jar ${SELENIUM_LIB} -port ${SELENIUM_PORT} > ${SELENIUM_LOGDIR}/selenium.log 2> ${SELENIUM_LOGDIR}/selenium_err.log"

# Exit if java is not executable or Selenium jar is not readable
[ -x "${DAEMON}" -a -r "${SELENIUM_LIB}" ] || exit 0

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

if [ -z "${SELENIUM_USER}" ]; then
    log_warning_msg "Not starting $NAME, SELENIUM_USER not set in /etc/default/$NAME."
    exit 0
fi

do_start()
{
    start-stop-daemon \
        --start \
        --background \
        --quiet \
        --pidfile ${PIDFILE} \
        --chuid ${SELENIUM_USER} \
        --user ${SELENIUM_USER} \
        --exec ${DAEMON} \
        --test
    [ "$?" = "0" ] || return 1

    DISPLAY=${X_DISPLAY} start-stop-daemon \
        --start \
        --background \
        --quiet \
        --pidfile ${PIDFILE} \
        --make-pidfile \
        --chuid ${SELENIUM_USER} \
        --user ${SELENIUM_USER} \
        --exec ${DAEMON}  -- ${DAEMON_ARGS}
    [ "$?" = "0" ] || return 2

    return 0
}

do_stop()
{
    start-stop-daemon \
        --stop \
        --quiet \
        --retry=TERM/30/KILL/5 \
        --user ${SELENIUM_USER} \
        --pidfile ${PIDFILE}
    [ "$?" = "2" ] && return 2

    rm -rf ${PIDFILE}
    [ "$?" = 0 ] && return 0 || return 1
}

do_status()
{
    printf "%-50s" "Checking $SERVICE_NAME..."
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
            printf "%s\n" "Process dead but pidfile exists"
            exit 1
        else
            echo "Running"
        fi
    else
        printf "%s\n" "Service not running"
        exit 3
    fi
}

case "$1" in
    start)
        [ "${VERBOSE}" != "no" ] && log_daemon_msg "Starting ${DESC}" "${NAME}"
        do_start
        case "$?" in
            0|1) [ "${VERBOSE}" != "no" ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != "no" ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Stopping ${DESC}" "${NAME}"
        do_stop
        case "$?" in
            0|1) [ "${VERBOSE}" != no ] && log_end_msg 0 ;;
            2) [ "${VERBOSE}" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc ${DAEMON} ${NAME} -p ${PIDFILE}
        ;;
    restart|force-reload)
        [ "${VERBOSE}" != no ] && log_daemon_msg "Restarting ${DESC}" "${NAME}"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;;
                    *) log_end_msg 1 ;;
                esac
                ;;
            *) log_end_msg 1 ;;
        esac
        ;;
    *)
        echo "Usage: ${SCRIPTNAME} (start|stop|status|restart|force-reload)" >&2
        exit 3
esac
