---

## Global variables
hostname: frontend.irma
frontend_user: www-data
frontend_group: www-data
frontend_project_dir: /var/www/prod.project.local
frontend_install_dir: "{{ frontend_project_dir }}/current"
frontend_releases_dir: "{{ frontend_project_dir }}/releases"
frontend_venv_dir: "{{ frontend_install_dir }}/venv"


## Deployment
frontend_deployment_repository: "https://github.com/quarkslab/irma-frontend.git"
frontend_configs:
  - section: broker_brain
    option: host
    value: brain.irma
  - section: broker_frontend
    option: host
    value: brain.irma
  - section: backend_brain
    option: host
    value: brain.irma
  - section: ftp_brain
    option: host
    value: brain.irma
  - section: sqldb
    option: dbms
    value: postgresql
  - section: sqldb
    option: dialect
    value: psycopg2
  - section: sqldb
    option: username
    value: irma
  - section: sqldb
    option: password
    value: irma
  - section: sqldb
    option: dbname
    value: irma-frontend


## HTTPs
frontend_openssl: False # Default value is False. For HTTPs using OpenSSL,
                        # change it to True
frontend_openssl_dh_param: /etc/nginx/certs/{{ hostname }}_dhparam.pem

frontend_openssl_certificates:
  cert:
    src: files/{{ hostname }}/hostname.crt
    dst: /etc/nginx/certs/{{ hostname }}.crt
  key:
    src: files/{{ hostname }}/hostname.key
    dst: /etc/nginx/certs/{{ hostname }}.key
  ca:
    src: files/{{ hostname }}/ca.crt
    dst: /etc/nginx/certs/ca.crt


## Users role
frontend_users:
  - username: www-data
    name: www-data
    groups: ['www-data']
    uid: 1003
    ssh_key: "{{ default_ssh_keys }}"


## uWSGI role
uwsgi_install_method: "pip"


## NodeJS role
nodejs_version: "0.10.30"
nodejs_global_packages:
  - debug


# Basic settings for PostgreSQL
postgresql_version: 9.3
postgresql_encoding: 'UTF-8'
postgresql_locale: 'en_US.UTF-8'

postgresql_admin_user: "postgres"
postgresql_default_auth_method: "trust"

postgresql_cluster_name: "main"
postgresql_cluster_reset: false

postgresql_databases:
  - name: irma-frontend

postgresql_users:
  - name: irma
    pass: irma
    encrypted: no

postgresql_user_privileges:
  - name: irma
    db: irma-frontend
    priv: "ALL"


## Supervisor role
supervisor_programs_frontend:
  - name: frontend_app
    command: "{{ frontend_venv_dir }}/bin/celery worker -A frontend.tasks:frontend_app --hostname=frontend_app.%%h {{default_celery_options}}"
    directory: "{{ frontend_install_dir }}"
    user: irma
    numprocs: 1
    stdout_logfile: /var/log/supervisor/frontend_app.log
    stderr_logfile: /var/log/supervisor/frontend_app.log
    autostart: true
    stopwaitsecs: 600
    killasgroup: true
  - name: frontend_api
    command: >
      /usr/local/bin/uwsgi -s 127.0.0.1:8081 --disable-logging --master --workers 4 --need-app
      --chdir {{ frontend_install_dir }} --home {{ frontend_install_dir }}/venv
      --python-path {{ frontend_install_dir }}/venv --mount /_api=frontend/api/base.py
    user: irma
    numprocs: 1
    stdout_logfile: /var/log/supervisor/frontend_api.log
    stderr_logfile: /var/log/supervisor/frontend_api.log
    redirect_stderr: true
    stopsignal: INT
    autostart: true
    stopwaitsecs: 600
    killasgroup: true


## Nginx role
nginx_configs:
  proxy:
    - proxy_set_header X-Real-IP $remote_addr
    - proxy_set_header Host $http_host
    - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for
    - proxy_set_header X-NginX-Proxy true
    - proxy_redirect off
    - proxy_http_version 1.1
    - proxy_set_header Upgrade $http_upgrade
    - proxy_set_header Connection "upgrade"
  gzip:
    - gzip on
    - gzip_disable "msie6"
    - gzip_comp_level 6
    - gzip_buffers 16 8k
    - gzip_http_version 1.1
    - gzip_types text/plain text/css application/json application/x-javascript text/javascript application/javascript
  http:
    - types_hash_max_size 2048
    - server_names_hash_bucket_size 64

nginx_sites:
  itsatrap:
    - server_name {{ ansible_eth1.ipv4.address }}
    - listen 80
    - root /usr/share/nginx/www/
    - index index.html
  irma-frontend:
    - listen 80 default_server
    - listen [::]:80 default_server ipv6only=on
    - server_name www.{{ hostname }}
    - client_max_body_size 100m
    - location ~ /\.ht {
        deny all;
      }
    - location /_api {
        include uwsgi_params;
        rewrite ^/_api/(.+) /$1 break;
        uwsgi_pass 127.0.0.1:8081;
      }
    - location / {
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        root /var/www/prod.project.local/current/web/dist;
        try_files $uri $uri/ /index.html =404;
      }
    - error_log {{ nginx_log_dir }}/{{ hostname }}.error.log
    - access_log {{ nginx_log_dir }}/{{ hostname }}.access.log
  # Uncomment the following for HTTPs using OpenSSL support
  # It can be customize for your needs
  #irma-frontend-https:
    #- listen 443 default_server
    #- listen [::]:443 default_server ipv6only=on
    #- server_name www.{{ hostname }}
    #- client_max_body_size 100m
    #- location ~ /\.ht {
        #deny all;
      #}
    #- location /_api {
        #include uwsgi_params;
        #rewrite ^/_api/(.+) /$1 break;
        #uwsgi_pass 127.0.0.1:8081;
      #}
    #- location / {
        #alias {{ frontend_install_dir }}/web/dist/;
        #index index.html;
      #}
    #- error_log {{ nginx_log_dir }}/{{ hostname }}.error.log
    #- access_log {{ nginx_log_dir }}/{{ hostname }}.access.log
    ## TLS configuration
    #- ssl on
    #- ssl_certificate {{ frontend_openssl_certificates.cert.dst }}
    #- ssl_certificate_key {{ frontend_openssl_certificates.key.dst }}
    ## dhparam of 2048 bit or greater (1024 if java6 required)
    #- ssl_dhparam {{ frontend_openssl_dh_param }}
    #- ssl_session_timeout 5m
    #- ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2
    #- ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4'
    #- ssl_prefer_server_ciphers on
    ## TLS session cache
    #- ssl_session_cache shared:SSL:50m
    ## HSTS record cache for 6 months
    #- add_header Strict-Transport-Security max-age=15768000

# vim: sw=2
